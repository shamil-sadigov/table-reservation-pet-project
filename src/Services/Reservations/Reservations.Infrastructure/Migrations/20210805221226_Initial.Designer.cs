// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Reservations.Infrastructure.Contexts;

namespace Reservations.Infrastructure.Migrations
{
    [DbContext(typeof(ApplicationContext))]
    [Migration("20210805221226_Initial")]
    partial class Initial
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .UseIdentityColumns()
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("ProductVersion", "5.0.2");

            modelBuilder.Entity("Reservations.Domain.ReservationRequestRejections.ReservationRequestRejection", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("_reason")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("Reason");

                    b.Property<Guid>("_rejectedByAdministratorId")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("RejectedByAdministratorId");

                    b.Property<DateTime>("_rejectionDateTime")
                        .HasColumnType("datetime2")
                        .HasColumnName("RejectionDateTime");

                    b.Property<Guid>("_reservationRequestId")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("ReservationRequestId");

                    b.HasKey("Id");

                    b.HasIndex("_reservationRequestId")
                        .IsUnique();

                    b.ToTable("ReservationRequestRejections", "reservation");
                });

            modelBuilder.Entity("Reservations.Domain.ReservationRequests.ReservationRequest", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("_closedDateTime")
                        .HasColumnType("datetime2")
                        .HasColumnName("ClosedDateTime");

                    b.Property<DateTime>("_createdDateTime")
                        .HasColumnType("datetime2")
                        .HasColumnName("CreatedDateTime");

                    b.Property<Guid>("_restaurantId")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("RestaurantId");

                    b.Property<string>("_state")
                        .IsConcurrencyToken()
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("State");

                    b.Property<string>("_tableId")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("TableId");

                    b.Property<DateTime>("_visitingDateTime")
                        .HasColumnType("datetime2")
                        .HasColumnName("VisitingDateTime");

                    b.Property<Guid>("_visitorId")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("VisitorId");

                    b.HasKey("Id");

                    b.HasIndex("_visitorId");

                    b.ToTable("ReservationRequests", "reservation");
                });

            modelBuilder.Entity("Reservations.Domain.Reservations.Reservation", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("_approvedByAdministratorId")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("ApprovedByAdministratorId");

                    b.Property<DateTime>("_approvedDateTime")
                        .HasColumnType("datetime2")
                        .HasColumnName("ApprovedDateTime");

                    b.Property<Guid>("_reservationRequestId")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("ReservationRequestId");

                    b.Property<string>("_tableId")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("TableId");

                    b.Property<Guid>("_visitorId")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("VisitorId");

                    b.HasKey("Id");

                    b.HasIndex("_reservationRequestId")
                        .IsUnique();

                    b.HasIndex("_visitorId");

                    b.ToTable("Reservations", "reservation");
                });

            modelBuilder.Entity("Reservations.Domain.Visitors.Visitor", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.ToTable("Visitor");
                });

            modelBuilder.Entity("Reservations.Domain.ReservationRequestRejections.ReservationRequestRejection", b =>
                {
                    b.HasOne("Reservations.Domain.ReservationRequests.ReservationRequest", null)
                        .WithOne()
                        .HasForeignKey("Reservations.Domain.ReservationRequestRejections.ReservationRequestRejection", "_reservationRequestId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();
                });

            modelBuilder.Entity("Reservations.Domain.ReservationRequests.ReservationRequest", b =>
                {
                    b.HasOne("Reservations.Domain.Visitors.Visitor", null)
                        .WithMany()
                        .HasForeignKey("_visitorId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();
                });

            modelBuilder.Entity("Reservations.Domain.Reservations.Reservation", b =>
                {
                    b.HasOne("Reservations.Domain.ReservationRequests.ReservationRequest", null)
                        .WithOne()
                        .HasForeignKey("Reservations.Domain.Reservations.Reservation", "_reservationRequestId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Reservations.Domain.Visitors.Visitor", null)
                        .WithMany()
                        .HasForeignKey("_visitorId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();
                });
#pragma warning restore 612, 618
        }
    }
}
